plugins {
    id 'com.palantir.docker' version '0.25.0' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    // for run ./gradlew jmh
    id 'me.champeau.jmh' version '0.6.8'
    id "org.owasp.dependencycheck" version "8.1.0"
}

apply plugin: 'application'
apply plugin: 'com.palantir.docker'
apply plugin: 'kotlin-kapt'

ext {
    sailfishVersion = '3.3.54'
}
ext.excludeSailfish = { rcd ->
    rcd.excludeModule("com.exactpro.sf", "sailfish-common")
    rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
}

group = 'com.exactpro.th2'
version = release_version

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    maven {
        name 'Sonatype_snapshots'
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        content {
            excludeSailfish(it)
        }
    }
    maven {
        name 'Sonatype_releases'
        url 'https://s01.oss.sonatype.org/content/repositories/releases/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }
    mavenCentral()

    configurations.configureEach {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

configurations.implementation {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    api platform('com.exactpro.th2:bom:4.2.0')

    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation 'com.exactpro.th2:common:3.44.1'
    implementation 'com.exactpro.th2:codec:4.8.1'

    implementation 'io.netty:netty-buffer'

    compileOnly 'com.google.auto.service:auto-service:1.0.1'

    implementation 'org.slf4j:slf4j-api'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'io.github.microutils:kotlin-logging:3.0.0'

    testImplementation "org.junit.jupiter:junit-jupiter:5.9.0"
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5:1.6.21'

    kapt 'com.google.auto.service:auto-service:1.0.1'

    jmh 'org.openjdk.jmh:jmh-core:1.36'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'

    implementation 'org.apache.avro:avro:1.11.1'
}

test {
    useJUnitPlatform()
}

application {
    mainClass.set('com.exactpro.th2.codec.MainKt')
}

applicationName = 'service'

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "11"
    }
}
jmh {
    //profilers = ['stack'] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr, async]
}
dependencyLocking {
    lockAllConfigurations()
}
dependencyCheck {
    formats=['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS=5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}
